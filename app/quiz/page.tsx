// app/quiz/page.tsx

"use client"

import { useEffect, useState } from "react";
import { auth, db } from "../../lib/firebase";
import { onAuthStateChanged } from "firebase/auth";
import { collection, getDocs, doc, updateDoc, increment } from "firebase/firestore";
import { useRouter } from "next/navigation";
import { useUserTheme } from "../../lib/useTheme"; // << 1. import hook ‡∏ò‡∏µ‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤

export default function QuizPage() {
  const [questions, setQuestions] = useState<any[]>([]);
  const [current, setCurrent] = useState(0);
  const [user, setUser] = useState<any>(null);
  const router = useRouter();
  const theme = useUserTheme(); // << 2. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ hook ‡πÉ‡∏ô component

  useEffect(() => {
    // ... ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô useEffect ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ ...
    onAuthStateChanged(auth, async (u) => {
      if (!u) {
        router.push("/login");
        return;
      }
      setUser(u);
    });

    const loadQuestions = async () => {
      const qSnap = await getDocs(collection(db, "questions"));
      const qList = qSnap.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      setQuestions(qList.sort(() => Math.random() - 0.5));
    };

    loadQuestions();
  }, []); // dependency array ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß

  const handleAnswer = async (choiceIndex: number) => {
    // ... ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô handleAnswer ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ ...
    const q = questions[current];
    const correct = choiceIndex === q.correctIndex;

    if (correct) {
      const userRef = doc(db, "users", user.uid);
      await updateDoc(userRef, {
        points: increment(10)
      });
      alert("‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á! +10 ‡πÅ‡∏ï‡πâ‡∏°");
    } else {
      alert("‡∏ú‡∏¥‡∏î ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà");
    }

    if (current + 1 < questions.length) {
      setCurrent(current + 1);
    } else {
      alert("‡∏ó‡∏≥‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ Dashboard");
      router.push("/dashboard");
    }
  };

  if (questions.length === 0) return <p className="p-6">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏à‡∏ó‡∏¢‡πå...</p>;

  const q = questions[current];

  return (
    <main className="p-6 text-center">
      <h1 className="text-xl font-bold mb-4">‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà {current + 1}</h1>
      <p className="mb-4">{q.question}</p>
      <div className="space-y-2">
        {q.choices.map((choice: string, index: number) => (
          <button
            key={index}
            onClick={() => handleAnswer(index)}
            // üëá 3. ‡∏•‡∏ö‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏¢‡∏ï‡∏±‡∏ß (bg-white, text-black) ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
            className="block font-medium px-4 py-3 rounded-xl w-full max-w-md mx-auto shadow-md transition-opacity hover:opacity-80"
            // üëá 4. ‡πÄ‡∏û‡∏¥‡πà‡∏° style ‡πÅ‡∏ö‡∏ö inline ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏à‡∏≤‡∏Å hook ‡πÅ‡∏ó‡∏ô
            style={{
              backgroundColor: theme.textColor, // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏∏‡πà‡∏° = ‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏ò‡∏µ‡∏°
              color: theme.bgColor,             // ‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏õ‡∏∏‡πà‡∏° = ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏ò‡∏µ‡∏°
            }}
          >
            {choice}
          </button>
        ))}
      </div>
    </main>
  );
}