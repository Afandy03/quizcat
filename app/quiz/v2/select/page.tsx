'use client'

import { useState, useEffect } from 'react'
import { collection, getDocs } from 'firebase/firestore'
import { db } from '@/lib/firebase'
import { useRouter } from 'next/navigation'
import { useUserTheme, getBackgroundStyle } from '@/lib/useTheme'
import ThemedLayout from '@/components/ThemedLayout'
import { motion, AnimatePresence } from 'framer-motion'

interface Question {
  id: string
  question: string
  choices: string[]
  correctIndex: number
  subject: string
  topic: string
  grade: string | number  // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á string ‡πÅ‡∏•‡∏∞ number
  difficulty: 'easy' | 'medium' | 'hard'
  explanation?: string
}

export default function QuizV2SelectPage() {
  const [allQuestions, setAllQuestions] = useState<Question[]>([])
  const [subjects, setSubjects] = useState<string[]>([])
  const [topics, setTopics] = useState<string[]>([])
  const [grades, setGrades] = useState<(string | number)[]>([])  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô array ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á string ‡πÅ‡∏•‡∏∞ number
  const [selectedSubject, setSelectedSubject] = useState('')
  const [selectedTopic, setSelectedTopic] = useState('')
  const [selectedGrade, setSelectedGrade] = useState('')
  const [selectedDifficulty, setSelectedDifficulty] = useState('')
  const [questionCount, setQuestionCount] = useState(10)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [randomSeed, setRandomSeed] = useState(false)

  const { theme } = useUserTheme()
  const router = useRouter()

  useEffect(() => {
    const loadQuestions = async () => {
      try {
        const qSnap = await getDocs(collection(db, 'questions'))
        const questions = qSnap.docs.map(doc => ({
          id: doc.id,
          ...(doc.data() as Omit<Question, 'id'>),
        }))

        setAllQuestions(questions)

        // Extract unique values
        const uniqueSubjects = [...new Set(questions.map(q => q.subject).filter(Boolean))]
        
        // ‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• grades ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á string ‡πÅ‡∏•‡∏∞ number
        const allGrades = questions
          .map(q => q.grade)
          .filter(g => g != null && g !== '')
          .map(g => {
            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô string ‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ "‡∏õ." ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô number
            if (typeof g === 'string' && g.startsWith('‡∏õ.')) {
              const num = parseInt(g.replace('‡∏õ.', ''))
              return isNaN(num) ? g : num
            }
            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô number ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            if (typeof g === 'number' && !isNaN(g)) {
              return g
            }
            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô string ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
            if (typeof g === 'string') {
              const num = parseInt(g)
              return isNaN(num) ? g : num
            }
            return g
          })
        
        const uniqueGrades = [...new Set(allGrades)].sort((a, b) => {
          // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÇ‡∏î‡∏¢‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏Å‡πà‡∏≠‡∏ô
          const numA = typeof a === 'number' ? a : parseInt(String(a).replace('‡∏õ.', ''))
          const numB = typeof b === 'number' ? b : parseInt(String(b).replace('‡∏õ.', ''))
          
          if (!isNaN(numA) && !isNaN(numB)) {
            return numA - numB
          }
          
          // ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
          return String(a).localeCompare(String(b))
        })
        
        setSubjects(uniqueSubjects)
        setGrades(uniqueGrades)
      } catch (e: any) {
        console.error(e)
        setError('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß')
      } finally {
        setLoading(false)
      }
    }

    loadQuestions()
  }, [])

  useEffect(() => {
    if (selectedSubject) {
      const filteredQuestions = allQuestions.filter(q => q.subject === selectedSubject)
      const uniqueTopics = [...new Set(filteredQuestions.map(q => q.topic).filter(Boolean))]
      setTopics(uniqueTopics)
      setSelectedTopic('')
    } else {
      setTopics([])
      setSelectedTopic('')
    }
  }, [selectedSubject, allQuestions])

  const getAvailableQuestions = () => {
    let filtered = allQuestions

    if (selectedSubject) {
      filtered = filtered.filter(q => q.subject === selectedSubject)
    }
    if (selectedTopic) {
      filtered = filtered.filter(q => q.topic === selectedTopic)
    }
    if (selectedGrade) {
      filtered = filtered.filter(q => {
        // ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏ö‡∏ö‡∏ï‡∏£‡∏á‡πÑ‡∏õ‡∏ï‡∏£‡∏á‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)
        if (q.grade === selectedGrade) {
          return true;
        }

        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)
        let questionGradeNum = -1;
        let selectedGradeNum = -1;

        // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ grade ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö
        if (typeof q.grade === 'number') {
          questionGradeNum = q.grade;
        } else if (typeof q.grade === 'string') {
          const num = parseInt(q.grade.replace('‡∏õ.', ''));
          if (!isNaN(num)) {
            questionGradeNum = num;
          }
        }

        // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ grade ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        if (typeof selectedGrade === 'string') {
          const num = parseInt(selectedGrade.replace('‡∏õ.', ''));
          if (!isNaN(num)) {
            selectedGradeNum = num;
          }
        } else if (typeof selectedGrade === 'number') {
          selectedGradeNum = selectedGrade;
        }

        // ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏î‡πâ)
        return questionGradeNum !== -1 && selectedGradeNum !== -1 && questionGradeNum === selectedGradeNum;
      })
    }
    if (selectedDifficulty) {
      filtered = filtered.filter(q => q.difficulty === selectedDifficulty)
    }

    return filtered
  }

  const shuffleArray = (array: any[]) => {
    const shuffled = [...array]
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]]
    }
    return shuffled
  }

  const handleStartQuiz = () => {
    const questions = getAvailableQuestions()
    if (questions.length === 0) {
      alert('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å')
      return
    }

    // ‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤
    const finalQuestionCount = Math.min(questionCount, questions.length)

    // ‡∏™‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö
    const selectedQuestions = randomSeed 
      ? shuffleArray(questions).slice(0, finalQuestionCount)
      : questions.slice(0, finalQuestionCount)

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL parameters
    const params = new URLSearchParams()
    if (selectedSubject) params.set('subject', selectedSubject)
    if (selectedTopic) params.set('topic', selectedTopic)
    if (selectedGrade) params.set('grade', selectedGrade)
    if (selectedDifficulty) params.set('difficulty', selectedDifficulty)
    params.set('count', questionCount.toString())
    params.set('random', randomSeed.toString())

    router.push(`/quiz/v2/play?${params.toString()}`)
  }

  const resetFilters = () => {
    setSelectedSubject('')
    setSelectedTopic('')
    setSelectedGrade('')
    setSelectedDifficulty('')
    setQuestionCount(10)
    setRandomSeed(false)
  }

  const hasFilter = selectedSubject || selectedTopic || selectedGrade || selectedDifficulty
  const filteredQuestions = hasFilter ? getAvailableQuestions() : []
  const maxQuestions = Math.min(filteredQuestions.length, 50)

  const getDifficultyStats = () => {
    const easy = filteredQuestions.filter(q => q.difficulty === 'easy').length
    const medium = filteredQuestions.filter(q => q.difficulty === 'medium').length
    const hard = filteredQuestions.filter(q => q.difficulty === 'hard').length
    return { easy, medium, hard }
  }

  return (
    <ThemedLayout>
      <main className="p-6 max-w-4xl mx-auto space-y-6">
        <motion.div 
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center mb-8"
        >
          <h1 
            className="text-4xl font-bold mb-2"
            style={{ color: theme.textColor }}
          >
            üöÄ ‡∏ó‡∏≥‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö
          </h1>
          <p 
            className="text-lg"
            style={{ color: theme.textColor + '80' }}
          >
            ‡∏£‡∏∞‡∏ö‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
          </p>
          {/* ‚ú® NEW FEATURES ‚ú® removed as requested */}
        </motion.div>

        <div 
          className="rounded-2xl shadow-lg border p-6 space-y-6"
          style={{
            ...getBackgroundStyle(theme.bgColor),
            borderColor: theme.textColor + '20'
          }}
        >
          {/* Header Controls */}
          <div className="flex flex-col md:flex-row justify-between items-center gap-4 mb-6">
            <h2 className="text-xl font-bold" style={{ color: theme.textColor }}>
              üéØ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö
            </h2>
            <div className="flex gap-2">
              <button
                onClick={resetFilters}
                className="px-4 py-2 rounded-xl text-sm bg-red-500 text-white hover:bg-red-600 transition-all"
              >
                üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
              </button>
            </div>
          </div>

          {/* Features List */}
          <motion.div 
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.2 }}
            className="rounded-lg p-4"
            style={{
              backgroundColor: theme.textColor + '05',
              borderLeft: `4px solid #10b981`
            }}
          >
            <h3 
              className="font-bold mb-3"
              style={{ color: theme.textColor }}
            >
              üéØ ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡πÉ‡∏´‡∏°‡πà:
            </h3>
            <div 
              className="grid grid-cols-1 md:grid-cols-3 gap-2 text-sm"
              style={{ color: theme.textColor + '90' }}
            >
              <div>üìä ‡∏ß‡∏±‡∏î‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏ï‡∏¥‡∏î</div>
              <div>üìâ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏à‡∏∏‡∏î‡∏≠‡πà‡∏≠‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏¥‡∏ä‡∏≤</div>
              <div>üé≤ ‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡∏≠‡∏ö‡∏°‡∏±‡πà‡∏ß vs ‡πÅ‡∏ô‡πà‡πÉ‡∏à</div>
              <div>üìà ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ß‡∏¥‡∏ä‡∏≤</div>
              <div>‚è±Ô∏è ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠</div>
              <div>üß† ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à</div>
              <div>üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡∏á‡πà‡∏≤‡∏¢</div>
              <div>üîÄ ‡∏™‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö</div>
            </div>
          </motion.div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* Left Column */}
            <div className="space-y-4">
              {/* Subject Selection */}
              <motion.div
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.3 }}
              >
                <label 
                  className="block text-sm font-medium mb-2"
                  style={{ color: theme.textColor }}
                >
                  üìö ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤:
                </label>
                <select
                  className="w-full px-4 py-3 border rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                  style={{
                    ...getBackgroundStyle(theme.bgColor),
                    color: theme.textColor,
                    borderColor: theme.textColor + '40'
                  }}
                  value={selectedSubject}
                  onChange={(e) => {
                    setSelectedSubject(e.target.value)
                    setSelectedTopic('')
                  }}
                >
                  <option value="">-- ‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤ --</option>
                  {subjects.map((s, i) => (
                    <option key={i} value={s}>{s}</option>
                  ))}
                </select>
              </motion.div>

              {/* Topic Selection */}
              <motion.div
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.4 }}
              >
                <label 
                  className="block text-sm font-medium mb-2"
                  style={{ color: theme.textColor }}
                >
                  üìñ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î:
                </label>
                <select
                  className="w-full px-4 py-3 border rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 disabled:opacity-50"
                  style={{
                    ...getBackgroundStyle(theme.bgColor),
                    color: theme.textColor,
                    borderColor: theme.textColor + '40'
                  }}
                  value={selectedTopic}
                  onChange={(e) => setSelectedTopic(e.target.value)}
                  disabled={!selectedSubject}
                >
                  <option value="">-- ‡∏ó‡∏∏‡∏Å‡∏´‡∏°‡∏ß‡∏î --</option>
                  {topics.map((t, i) => (
                    <option key={i} value={t}>{t}</option>
                  ))}
                </select>
              </motion.div>
            </div>

            {/* Right Column */}
            <div className="space-y-4">
              {/* Grade Selection */}
              <motion.div
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.3 }}
              >
                <label 
                  className="block text-sm font-medium mb-2"
                  style={{ color: theme.textColor }}
                >
                  üéì ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô:
                </label>
                <select
                  className="w-full px-4 py-3 border rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                  style={{
                    ...getBackgroundStyle(theme.bgColor),
                    color: theme.textColor,
                    borderColor: theme.textColor + '40'
                  }}
                  value={selectedGrade}
                  onChange={(e) => setSelectedGrade(e.target.value)}
                >
                  <option value="">-- ‡∏ó‡∏∏‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô --</option>
                  {grades.map((g, i) => {
                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ g ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                    if (g == null || g === '') return null;
                    
                    // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
                    let displayText = '';
                    let value = g;
                    
                    if (typeof g === 'string' && g.startsWith('‡∏õ.')) {
                      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô "‡∏õ.X" ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°
                      displayText = g;
                      value = g;
                    } else if (typeof g === 'number') {
                      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡πá‡∏ô "‡∏õ.X"
                      displayText = `‡∏õ.${g}`;
                      value = g;
                    } else {
                      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏≠‡∏∑‡πà‡∏ô ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°
                      displayText = String(g);
                      value = g;
                    }
                    
                    return (
                      <option key={i} value={value}>{displayText}</option>
                    )
                  })}
                </select>
              </motion.div>

              {/* Difficulty Selection */}
              <motion.div
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.4 }}
              >
                <label 
                  className="block text-sm font-medium mb-2"
                  style={{ color: theme.textColor }}
                >
                  ‚≠ê ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å:
                </label>
                <select
                  className="w-full px-4 py-3 border rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200"
                  style={{
                    ...getBackgroundStyle(theme.bgColor),
                    color: theme.textColor,
                    borderColor: theme.textColor + '40'
                  }}
                  value={selectedDifficulty}
                  onChange={(e) => setSelectedDifficulty(e.target.value)}
                >
                  <option value="">-- ‡∏ó‡∏∏‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö --</option>
                  <option value="easy">üü¢ ‡∏á‡πà‡∏≤‡∏¢</option>
                  <option value="medium">üü° ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á</option>
                  <option value="hard">üî¥ ‡∏¢‡∏≤‡∏Å</option>
                </select>
              </motion.div>
            </div>
          </div>

          {/* Question Count & Settings */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.5 }}
            className="space-y-4"
          >
            <div>
              <label 
                className="block text-sm font-medium mb-2"
                style={{ color: theme.textColor }}
              >
                üìù ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö:
              </label>
              <input
                type="range"
                min="1"
                max={maxQuestions || 1}
                value={questionCount}
                onChange={(e) => setQuestionCount(parseInt(e.target.value))}
                disabled={!hasFilter}
                className="w-full disabled:opacity-50"
              />
              <div 
                className="flex justify-between text-sm mt-1"
                style={{ color: theme.textColor + (hasFilter ? '80' : '50') }}
              >
                <span>1 ‡∏Ç‡πâ‡∏≠</span>
                <span 
                  className="font-bold text-lg"
                  style={{ color: theme.textColor + (hasFilter ? '' : '50') }}
                >
                  {hasFilter ? questionCount : 0} ‡∏Ç‡πâ‡∏≠
                </span>
                <span>{hasFilter ? maxQuestions : 0} ‡∏Ç‡πâ‡∏≠ (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î)</span>
              </div>
            </div>

            {/* Advanced Settings */}
            <div className="flex items-center gap-4">
              <label className="flex items-center gap-2 cursor-pointer">
                <input
                  type="checkbox"
                  checked={randomSeed}
                  onChange={(e) => setRandomSeed(e.target.checked)}
                  className="scale-125"
                />
                <span style={{ color: theme.textColor }} className="text-sm">
                  üé≤ ‡∏™‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö
                </span>
              </label>
            </div>
          </motion.div>

          {/* Question Stats Display */}
          <AnimatePresence>
            {hasFilter ? (
              <motion.div 
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.9 }}
                className="border rounded-lg p-6 text-center"
                style={{
                  borderColor: theme.textColor + '20',
                  backgroundColor: theme.textColor + '05'
                }}
              >
                <div 
                  className="text-3xl font-bold mb-2"
                  style={{ color: theme.textColor }}
                >
                  üìã {filteredQuestions.length} ‡∏Ç‡πâ‡∏≠
                </div>
                <p 
                  className="text-sm mb-4"
                  style={{ color: theme.textColor + '80' }}
                >
                  ‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
                </p>
                {filteredQuestions.length > 0 && (
                  <div 
                    className="grid grid-cols-3 gap-4 text-xs"
                    style={{ color: theme.textColor + '70' }}
                  >
                    <div 
                      className="p-3 rounded-lg"
                      style={{ backgroundColor: '#10b981' + '20' }}
                    >
                      <div className="font-semibold text-green-600">üìó ‡∏á‡πà‡∏≤‡∏¢</div>
                      <div className="text-lg font-bold">{getDifficultyStats().easy}</div>
                    </div>
                    <div 
                      className="p-3 rounded-lg"
                      style={{ backgroundColor: '#f59e0b' + '20' }}
                    >
                      <div className="font-semibold text-yellow-600">üìò ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á</div>
                      <div className="text-lg font-bold">{getDifficultyStats().medium}</div>
                    </div>
                    <div 
                      className="p-3 rounded-lg"
                      style={{ backgroundColor: '#ef4444' + '20' }}
                    >
                      <div className="font-semibold text-red-600">üìï ‡∏¢‡∏≤‡∏Å</div>
                      <div className="text-lg font-bold">{getDifficultyStats().hard}</div>
                    </div>
                  </div>
                )}
              </motion.div>
            ) : (
              <motion.div 
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="border rounded-lg p-6 text-center"
                style={{
                  borderColor: theme.textColor + '20',
                  backgroundColor: theme.textColor + '05'
                }}
              >
                <div className="text-4xl mb-3">üîç</div>
                <p 
                  className="text-sm"
                  style={{ color: theme.textColor + '70' }}
                >
                  ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô
                </p>
              </motion.div>
            )}
          </AnimatePresence>



          {/* Start Button */}
          <motion.button
            whileHover={{ scale: hasFilter && filteredQuestions.length > 0 ? 1.02 : 1 }}
            whileTap={{ scale: hasFilter && filteredQuestions.length > 0 ? 0.98 : 1 }}
            onClick={handleStartQuiz}
            disabled={!hasFilter || filteredQuestions.length === 0}
            className="w-full py-4 px-6 rounded-xl font-bold text-xl shadow-lg transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
            style={{
              background: hasFilter && filteredQuestions.length > 0
                ? 'linear-gradient(45deg, #10b981, #059669)' 
                : theme.textColor + '40',
              color: '#ffffff',
            }}
          >
            {!hasFilter ? 'üîç ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡πà‡∏≠‡∏ô' :
             filteredQuestions.length === 0 ? '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö' :
             questionCount > filteredQuestions.length ? `‚ö†Ô∏è ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏µ‡∏¢‡∏á ${filteredQuestions.length} ‡∏Ç‡πâ‡∏≠` :
             'üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö'}
          </motion.button>
        </div>

        <div className="text-center">
          <button
            onClick={() => router.push('/dashboard')}
            className="hover:opacity-80 transition-opacity text-sm"
            style={{ color: theme.textColor + '80' }}
          >
            ‚¨ÖÔ∏è ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
          </button>
        </div>
      </main>
    </ThemedLayout>
  )

  if (loading) {
    return (
      <ThemedLayout>
        <div className="flex justify-center items-center min-h-screen">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 mx-auto mb-4" style={{ borderColor: theme.textColor }}></div>
            <p style={{ color: theme.textColor }}>‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö...</p>
          </div>
        </div>
      </ThemedLayout>
    )
  }

  if (error) {
    return (
      <ThemedLayout>
        <div className="flex justify-center items-center min-h-screen">
          <div className="text-center">
            <div className="text-4xl mb-4">‚ùå</div>
            <p style={{ color: '#ef4444' }}>{error}</p>
            <button 
              onClick={() => window.location.reload()}
              className="mt-4 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
            >
              ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
            </button>
          </div>
        </div>
      </ThemedLayout>
    )
  }
}