// app/analysis/page.tsx
'use client'

import ThemedLayout from "@/components/ThemedLayout"
import { useState, useMemo } from "react"
import { useFetchAnswers } from "@/hooks/useFetchAnswers"
import SummaryChart from "@/components/SummaryChart"
import AnswerSection from "@/components/AnswerSection"
import { normalizeKey } from "@/lib/normalizeKey"
import { formatTime } from "@/lib/formatters"

export default function AnalysisPage() {
  const { answers, summary, insights, loading, deleteAnswer } = useFetchAnswers()
  const [expandedSection, setExpandedSection] = useState<string | null>(null)

  const toggleExpand = (section: string) => {
    setExpandedSection(prev => prev === section ? null : section)
  }

  const answersBySection = useMemo(() => {
    if (answers.length === 0) return {}

    const grouped: Record<string, any[]> = {}
    for (const ans of answers) {
      const key = normalizeKey(ans.subject, ans.topic)
      if (!grouped[key]) {
        grouped[key] = []
      }
      grouped[key].push(ans)
    }
    return grouped
  }, [answers])

  return (
    <ThemedLayout>
      <div className="p-6 max-w-4xl mx-auto space-y-6">
        <h1 className="text-3xl font-bold text-center text-purple-800">üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h1>

        {loading ? (
          <p className="text-center text-gray-500">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</p>
        ) : !insights || summary.length === 0 ? (
          <p className="text-center text-gray-500">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå</p>
        ) : (
          <>
            <div className="bg-yellow-50 border border-yellow-300 p-4 rounded-xl shadow-sm space-y-1 text-sm">
              <p>üìù ‡∏ï‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î <strong>{insights.total}</strong> ‡∏Ç‡πâ‡∏≠</p>
              <p>üéØ ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: <strong>{(insights.avgScore * 100).toFixed(0)}%</strong></p>
              <p>‚è±Ô∏è ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠: <strong>{formatTime(insights.avgTime)}</strong></p>
              <p>üß† ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: <strong>{insights.best?.topic}</strong> (‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ {((insights.best?.avg || 0) * 100).toFixed(0)}%)</p>
              <p>‚ö†Ô∏è ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏™‡∏∏‡∏î: <strong>{insights.worst?.topic}</strong> (‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ {((insights.worst?.avg || 0) * 100).toFixed(0)}%)</p>
              <p>‚è≥ ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: <strong>{insights.mostTimeSpent?.[0]}</strong> ({formatTime(insights.mostTimeSpent?.[1])})</p>
            </div>

            <SummaryChart data={summary} />

            {/* ‚ûï ‡πÅ‡∏Å‡πâ logic ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠: ‡πÄ‡∏≠‡∏≤ answersBySection ‡∏°‡∏≤‡πÉ‡∏ä‡πâ ‡πÑ‡∏°‡πà filter ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏° */}
            {summary.map((sectionData) => {
              const isExpanded = expandedSection === sectionData.section
              // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß
              const sectionAnswers = answersBySection[sectionData.section] || []

              return (
                <AnswerSection
                  key={sectionData.section}
                  data={sectionData}
                  answers={sectionAnswers}
                  isExpanded={isExpanded}
                  onToggle={() => toggleExpand(sectionData.section)}
                  onDelete={deleteAnswer}
                />
              )
            })}
          </>
        )}
      </div>
    </ThemedLayout>
  )
}