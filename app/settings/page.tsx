// settings/page.tsx

"use client"

import { useState, useEffect } from "react" // << 1. ‡πÄ‡∏û‡∏¥‡πà‡∏° useEffect ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
import { auth, db } from "../../lib/firebase"
import { doc, updateDoc } from "firebase/firestore"
import { useUserTheme } from "../../lib/useTheme" // << 2. import hook ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ

export default function SettingsPage() {
  // 3. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ hook ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ò‡∏µ‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏°‡∏≤
  const currentTheme = useUserTheme()

  // State ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏°‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á
  const [bgColor, setBgColor] = useState(currentTheme.bgColor)
  const [textColor, setTextColor] = useState(currentTheme.textColor)

  // 4. ‡πÉ‡∏ä‡πâ useEffect ‡πÄ‡∏û‡∏∑‡πà‡∏≠ "Sync" ‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å hook ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ
  useEffect(() => {
    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠ useUserTheme ‡πÇ‡∏´‡∏•‡∏î‡∏ò‡∏µ‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß (currentTheme ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô)
    // ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô state ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏ï‡∏≤‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
    setBgColor(currentTheme.bgColor)
    setTextColor(currentTheme.textColor)
  }, [currentTheme]) // ‡πÉ‡∏´‡πâ Effect ‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà currentTheme ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô

  const handleSave = async () => {
    const user = auth.currentUser
    if (!user) return alert("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ login")

    const ref = doc(db, "users", user.uid)
    await updateDoc(ref, {
      theme: {
        bgColor,      // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å state ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
        textColor     // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å state ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
      }
    })

    alert("‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ò‡∏µ‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ò‡∏µ‡∏°‡πÄ‡∏•‡∏¢")
    location.reload()
  }

  return (
    <main className="p-6 max-w-md mx-auto space-y-4">
      <h2 className="text-2xl font-bold">üé® ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ò‡∏µ‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</h2>

      <div className="space-y-2 flex items-center gap-4">
        <label>‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á</label>
        {/* value ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö state ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡∏ã‡∏∂‡πà‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß */}
        <input type="color" value={bgColor} onChange={(e) => setBgColor(e.target.value)} />
      </div>

      <div className="space-y-2 flex items-center gap-4">
        <label>‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠</label>
        <input type="color" value={textColor} onChange={(e) => setTextColor(e.target.value)} />
      </div>

      <button onClick={handleSave} className="bg-green-600 text-white px-4 py-2 rounded">
        ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ò‡∏µ‡∏°
      </button>
    </main>
  )
}