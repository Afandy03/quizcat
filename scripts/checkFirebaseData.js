// ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Firebase - ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå
// ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ: ‡πÄ‡∏õ‡∏¥‡∏î Console ‡πÉ‡∏ô Chrome/Firefox ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á

console.log("üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Firebase");

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
async function checkFirebaseData() {
  try {
    // ‡πÉ‡∏ä‡πâ Firebase ‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
    const { collection, getDocs } = await import('firebase/firestore');
    const { db } = await import('/lib/firebase.js');
    
    console.log("üì° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firebase...");
    
    const qSnap = await getDocs(collection(db, 'questions'));
    const questions = qSnap.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    }));
    
    console.log("üìã ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:", questions.length, "‡∏Ç‡πâ‡∏≠");
    
    // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á grade
    const gradeAnalysis = {};
    questions.forEach(q => {
      const type = typeof q.grade;
      const value = q.grade;
      const key = `${type}: ${value}`;
      gradeAnalysis[key] = (gradeAnalysis[key] || 0) + 1;
    });
    
    console.log("üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå field 'grade':");
    console.table(gradeAnalysis);
    
    // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå subjects
    const subjects = [...new Set(questions.map(q => q.subject).filter(Boolean))];
    console.log("üìö ‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö:", subjects);
    
    // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå topics
    const topics = [...new Set(questions.map(q => q.topic).filter(Boolean))];
    console.log("üìñ ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏û‡∏ö:", topics);
    
    // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå difficulties
    const difficulties = [...new Set(questions.map(q => q.difficulty).filter(Boolean))];
    console.log("‚≠ê ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏û‡∏ö:", difficulties);
    
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á
    console.log("\nüîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á:");
    
    const testGrades = ['‡∏õ.4', '‡∏õ.5', '‡∏õ.6', '4', '5', '6'];
    testGrades.forEach(testGrade => {
      const filtered = questions.filter(q => {
        if (typeof q.grade === 'string') {
          if (q.grade === testGrade) return true;
          
          const selectedNum = parseInt(testGrade);
          if (!isNaN(selectedNum) && q.grade.startsWith('‡∏õ.')) {
            const gradeNum = parseInt(q.grade.replace('‡∏õ.', ''));
            return gradeNum === selectedNum;
          }
          
          return false;
        } else {
          const selectedNum = parseInt(testGrade);
          return !isNaN(selectedNum) && q.grade === selectedNum;
        }
      });
      
      console.log(`  ‡∏Å‡∏£‡∏≠‡∏á "${testGrade}": ${filtered.length} ‡∏Ç‡πâ‡∏≠`);
    });
    
    // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
    console.log("\nüìã ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö 3 ‡∏Ç‡πâ‡∏≠‡πÅ‡∏£‡∏Å:");
    questions.slice(0, 3).forEach((q, i) => {
      console.log(`${i+1}. ${q.question}`);
      console.log(`   ‡∏ß‡∏¥‡∏ä‡∏≤: ${q.subject}, ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠: ${q.topic}, ‡∏£‡∏∞‡∏î‡∏±‡∏ö: ${q.grade} (${typeof q.grade})`);
    });
    
    return {
      totalQuestions: questions.length,
      gradeAnalysis,
      subjects,
      topics,
      difficulties,
      sampleQuestions: questions.slice(0, 3)
    };
    
  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:", error);
    throw error;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á
function testFilterLogic(questions, selectedGrade) {
  return questions.filter(q => {
    if (typeof q.grade === 'string') {
      if (q.grade === selectedGrade) return true;
      
      const selectedNum = parseInt(selectedGrade);
      if (!isNaN(selectedNum) && q.grade.startsWith('‡∏õ.')) {
        const gradeNum = parseInt(q.grade.replace('‡∏õ.', ''));
        return gradeNum === selectedNum;
      }
      
      return false;
    } else {
      const selectedNum = parseInt(selectedGrade);
      return !isNaN(selectedNum) && q.grade === selectedNum;
    }
  });
}

// ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô console
window.checkFirebaseData = checkFirebaseData;
window.testFilterLogic = testFilterLogic;

console.log("‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô! ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:");
console.log("  checkFirebaseData() - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î");
console.log("  testFilterLogic(questions, '‡∏õ.4') - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á");
