import { useState } from "react";

export default function ChatBot({
  show,
  onClose,
  question,
  choices,
}: {
  show: boolean;
  onClose: () => void;
  question: string;
  choices: string[];
}) {
  const [chatInput, setChatInput] = useState("");
  const [chatLog, setChatLog] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  if (!show) return null;

  return (
    <div className="bg-white border border-gray-300 rounded-xl shadow-md p-4 mt-4 text-left space-y-3 text-sm">
      {/* Header */}
      <div className="flex justify-between items-center mb-3">
        <p className="font-semibold text-blue-600">ü§ñ ‡∏ö‡∏±‡∏á‡∏ü‡∏±‡∏ô‡∏î‡∏µ‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏≥‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö</p>
        <button
          onClick={onClose}
          className="text-xs text-gray-500 hover:text-red-500 transition"
        >
          ‚ùå ‡∏õ‡∏¥‡∏î
        </button>
      </div>

      {/* Quick Help Buttons */}
      <div className="grid grid-cols-2 gap-2 mb-3">
        <button
          onClick={() => setChatInput("‡∏Ç‡πâ‡∏≠‡∏ô‡∏µ‡πâ‡∏ñ‡∏≤‡∏°‡∏≠‡∏∞‡πÑ‡∏£‡∏Ñ‡∏£‡∏±‡∏ö?")}
          className="text-xs p-2 bg-blue-50 hover:bg-blue-100 rounded border text-blue-700 transition-colors"
        >
          üí≠ ‡∏ñ‡∏≤‡∏°‡∏≠‡∏∞‡πÑ‡∏£?
        </button>
        <button
          onClick={() => setChatInput("‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏´‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á?")}
          className="text-xs p-2 bg-green-50 hover:bg-green-100 rounded border text-green-700 transition-colors"
        >
          üîç ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        </button>
        <button
          onClick={() => setChatInput("‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?")}
          className="text-xs p-2 bg-purple-50 hover:bg-purple-100 rounded border text-purple-700 transition-colors"
        >
          üîë ‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î
        </button>
        <button
          onClick={() => setChatInput("‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏¥‡∏î‡∏¢‡∏±‡∏á‡πÑ‡∏á‡∏î‡∏µ?")}
          className="text-xs p-2 bg-orange-50 hover:bg-orange-100 rounded border text-orange-700 transition-colors"
        >
          üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏¢‡∏±‡∏á‡πÑ‡∏á?
        </button>
      </div>

      {/* Log */}
      <div className="max-h-48 overflow-y-auto bg-gray-50 border border-gray-200 rounded-md px-3 py-2 space-y-2">
        {chatLog.length === 0 ? (
          <div className="text-center py-4">
            <p className="text-gray-400 text-xs mb-2">üëã ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ! ‡∏ö‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ</p>
            <p className="text-gray-500 text-xs">‡∏•‡∏≠‡∏á‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢</p>
          </div>
        ) : (
          chatLog.map((msg, i) => (
            <div
              key={i}
              className={`${
                msg.startsWith("‡πÄ‡∏£‡∏≤:")
                  ? "text-right"
                  : "text-left"
              }`}
            >
              <p
                className={`inline-block px-3 py-2 rounded-lg text-xs max-w-[85%] ${
                  msg.startsWith("‡πÄ‡∏£‡∏≤:")
                    ? "bg-blue-500 text-white"
                    : "bg-white border text-gray-700"
                }`}
              >
                {msg.replace(/^(‡πÄ‡∏£‡∏≤:|‡∏ö‡∏±‡∏á‡∏ü‡∏±‡∏ô‡∏î‡∏µ‡πâ:)\s*/, "")}
              </p>
            </div>
          ))
        )}
        {isLoading && (
          <div className="text-left">
            <p className="inline-block px-3 py-2 rounded-lg text-xs bg-gray-200 text-gray-600">
              <span className="animate-pulse">‡∏ö‡∏±‡∏á‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î...</span>
            </p>
          </div>
        )}
      </div>

      {/* Input */}
      <form
        onSubmit={async (e) => {
          e.preventDefault();
          if (!chatInput.trim() || isLoading) return;

          const currentInput = chatInput;
          setChatInput("");
          setIsLoading(true);

          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤
          setChatLog((prev) => [...prev, `‡πÄ‡∏£‡∏≤: ${currentInput}`]);

          try {
            const res = await fetch("/api/chat", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({
                systemPrompt: `‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ö‡∏±‡∏á‡∏ü‡∏±‡∏ô‡∏î‡∏µ‡πâ ‡∏û‡∏µ‡πà‡∏ï‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏î‡πá‡∏Å‡∏ó‡∏≥‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à ‡πÑ‡∏°‡πà‡∏ö‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ï‡∏£‡∏á‡πÜ ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏Ñ‡πà‡∏≠‡∏¢‡πÜ ‡∏û‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏¥‡∏î‡πÄ‡∏≠‡∏á ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ:

1. **‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÇ‡∏à‡∏ó‡∏¢‡πå**: ‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏ï‡∏Å‡πÇ‡∏à‡∏ó‡∏¢‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à ‡∏´‡∏≤‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
2. **‡∏ä‡∏ß‡∏ô‡∏î‡∏π‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å**: ‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö ‡∏ï‡∏±‡∏î‡∏ó‡∏¥‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
3. **‡πÇ‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö**: ‡∏ñ‡∏≤‡∏° "‡∏ô‡∏∂‡∏Å‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏≠‡∏Å‡∏ö‡πâ‡∏≤‡∏á?" "‡∏Ç‡πâ‡∏≠‡πÑ‡∏´‡∏ô‡∏î‡∏π‡πÅ‡∏õ‡∏•‡∏Å‡πÜ?" 
4. **‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à**: "‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å!", "‡∏Ñ‡∏¥‡∏î‡πÑ‡∏î‡πâ‡∏î‡∏µ‡πÅ‡∏•‡πâ‡∏ß!", "‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏î‡∏π!"

‡∏û‡∏π‡∏î‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏û‡∏µ‡πà‡πÜ ‡πÉ‡∏ä‡πâ "‡πÄ‡∏£‡∏≤" ‡πÅ‡∏ó‡∏ô "‡∏Ñ‡∏∏‡∏ì" ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ "‡∏´‡∏±‡∏ß‡∏≠‡∏Å‡∏ô‡∏∞‡∏•‡∏π‡∏Å" ‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡πÅ‡∏ï‡πà‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö`,
                question,
                choices,
                userMessage: currentInput,
              }),
            });

            if (!res.ok) {
              throw new Error(`HTTP ${res.status}`);
            }

            const data = await res.json();
            setChatLog((prev) => [
              ...prev,
              `‡∏ö‡∏±‡∏á‡∏ü‡∏±‡∏ô‡∏î‡∏µ‡πâ: ${data.reply || "‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏ô‡∏∞ ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö"}`,
            ]);
          } catch (error) {
            console.error('Chat error:', error);
            setChatLog((prev) => [
              ...prev,
              `‡∏ö‡∏±‡∏á‡∏ü‡∏±‡∏ô‡∏î‡∏µ‡πâ: ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏ö‡∏≠‡∏ó‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ‡∏ô‡∏∞ üôè`,
            ]);
          } finally {
            setIsLoading(false);
          }
        }}
        className="flex gap-2"
      >
        <input
          className="flex-1 border border-gray-300 rounded-md px-3 py-1.5 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
          placeholder="‡πÄ‡∏ä‡πà‡∏ô: ‡∏Ç‡πâ‡∏≠‡∏ô‡∏µ‡πâ‡∏ñ‡∏≤‡∏°‡∏≠‡∏∞‡πÑ‡∏£? ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏´‡∏ô‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πà?"
          value={chatInput}
          onChange={(e) => setChatInput(e.target.value)}
        />
        <button
          type="submit"
          disabled={!chatInput.trim() || isLoading}
          className="bg-blue-600 text-white px-3 py-1.5 text-sm rounded-md hover:bg-blue-700 disabled:opacity-50 transition-colors"
        >
          {isLoading ? "‚è≥" : "‡∏™‡πà‡∏á"}
        </button>
      </form>
    </div>
  );
}
