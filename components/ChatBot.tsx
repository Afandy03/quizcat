import { useState, useEffect } from "react";
import { useUserTheme, getBackgroundStyle } from "@/lib/useTheme";

export default function ChatBot({
  show,
  onClose,
  question,
  choices,
}: {
  show: boolean;
  onClose: () => void;
  question: string;
  choices: string[];
}) {
  const [chatInput, setChatInput] = useState("");
  const [chatLog, setChatLog] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const { theme } = useUserTheme();

  // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå chat log ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏à‡∏ó‡∏¢‡πå‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
  useEffect(() => {
    setChatLog([]);
  }, [question]);

  if (!show) return null;

  return (
    <div 
      className="rounded-xl shadow-lg border p-5 mt-4 text-left space-y-4 text-sm backdrop-blur-sm"
      style={{ 
        ...getBackgroundStyle(theme.bgColor),
        borderColor: theme.textColor + '20',
        boxShadow: `0 8px 32px ${theme.textColor}15`
      }}
    >
      {/* Header */}
      <div className="flex justify-between items-center mb-4">
        <div className="flex items-center gap-2">
          <div className="w-8 h-8 rounded-full bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center">
            <span className="text-white text-xs">ü§ñ</span>
          </div>
          <div>
            <p className="font-bold text-sm" style={{ color: theme.textColor }}>
              ‡∏ö‡∏±‡∏á‡∏ü‡∏±‡∏ô‡∏î‡∏µ‡πâ
            </p>
            <p className="text-xs" style={{ color: theme.textColor + '70' }}>
              ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏≥‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö
            </p>
          </div>
        </div>
        <button
          onClick={onClose}
          className="w-8 h-8 rounded-full flex items-center justify-center transition-all duration-200 hover:scale-110"
          style={{ 
            backgroundColor: theme.textColor + '10',
            color: theme.textColor + '80'
          }}
        >
          ‚úï
        </button>
      </div>

      {/* Quick Help Buttons */}
      <div className="grid grid-cols-2 gap-3 mb-4">
        <button
          onClick={() => setChatInput("‡∏Ç‡πâ‡∏≠‡∏ô‡∏µ‡πâ‡∏ñ‡∏≤‡∏°‡∏≠‡∏∞‡πÑ‡∏£‡∏Ñ‡∏£‡∏±‡∏ö?")}
          className="p-3 rounded-lg transition-all duration-200 hover:scale-105 flex items-center gap-2"
          style={{ 
            backgroundColor: '#3b82f6' + '15',
            borderColor: '#3b82f6' + '30',
            color: '#3b82f6'
          }}
        >
          <span>üí≠</span>
          <span className="text-xs font-medium">‡∏ñ‡∏≤‡∏°‡∏≠‡∏∞‡πÑ‡∏£?</span>
        </button>
        <button
          onClick={() => setChatInput("‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏´‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏ö‡πâ‡∏≤‡∏á?")}
          className="p-3 rounded-lg transition-all duration-200 hover:scale-105 flex items-center gap-2"
          style={{ 
            backgroundColor: '#10b981' + '15',
            borderColor: '#10b981' + '30',
            color: '#10b981'
          }}
        >
          <span>üîç</span>
          <span className="text-xs font-medium">‡∏î‡∏π‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</span>
        </button>
        <button
          onClick={() => setChatInput("‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?")}
          className="p-3 rounded-lg transition-all duration-200 hover:scale-105 flex items-center gap-2"
          style={{ 
            backgroundColor: '#8b5cf6' + '15',
            borderColor: '#8b5cf6' + '30',
            color: '#8b5cf6'
          }}
        >
          <span>üîë</span>
          <span className="text-xs font-medium">‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î</span>
        </button>
        <button
          onClick={() => setChatInput("‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏¥‡∏î‡∏¢‡∏±‡∏á‡πÑ‡∏á‡∏î‡∏µ?")}
          className="p-3 rounded-lg transition-all duration-200 hover:scale-105 flex items-center gap-2"
          style={{ 
            backgroundColor: '#f59e0b' + '15',
            borderColor: '#f59e0b' + '30',
            color: '#f59e0b'
          }}
        >
          <span>üöÄ</span>
          <span className="text-xs font-medium">‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏¢‡∏±‡∏á‡πÑ‡∏á?</span>
        </button>
      </div>

      {/* Chat Log */}
      <div 
        className="max-h-64 overflow-y-auto rounded-lg border p-4 space-y-3 scroll-smooth"
        style={{ 
          backgroundColor: theme.textColor + '05',
          borderColor: theme.textColor + '15'
        }}
      >
        {chatLog.length === 0 ? (
          <div className="text-center py-8">
            <div className="w-16 h-16 mx-auto mb-3 rounded-full bg-gradient-to-r from-blue-400 to-purple-400 flex items-center justify-center">
              <span className="text-2xl">üëã</span>
            </div>
            <p className="text-sm font-medium mb-1" style={{ color: theme.textColor }}>
              ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ! ‡∏ö‡∏±‡∏á‡∏ü‡∏±‡∏ô‡∏î‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
            </p>
            <p className="text-xs" style={{ color: theme.textColor + '70' }}>
              ‡∏•‡∏≠‡∏á‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
            </p>
          </div>
        ) : (
          chatLog.map((msg, i) => (
            <div
              key={i}
              className={`flex ${
                msg.startsWith("‡πÄ‡∏£‡∏≤:")
                  ? "justify-end"
                  : "justify-start"
              }`}
            >
              <div
                className={`max-w-[80%] px-4 py-3 rounded-2xl text-sm shadow-sm ${
                  msg.startsWith("‡πÄ‡∏£‡∏≤:")
                    ? "rounded-br-md"
                    : "rounded-bl-md"
                }`}
                style={{
                  backgroundColor: msg.startsWith("‡πÄ‡∏£‡∏≤:")
                    ? '#3b82f6'
                    : theme.textColor + '10',
                  color: msg.startsWith("‡πÄ‡∏£‡∏≤:")
                    ? '#ffffff'
                    : theme.textColor,
                  border: msg.startsWith("‡πÄ‡∏£‡∏≤:")
                    ? 'none'
                    : `1px solid ${theme.textColor}20`
                }}
              >
                {msg.replace(/^(‡πÄ‡∏£‡∏≤:|‡∏ö‡∏±‡∏á‡∏ü‡∏±‡∏ô‡∏î‡∏µ‡πâ:)\s*/, "")}
              </div>
            </div>
          ))
        )}
        {isLoading && (
          <div className="flex justify-start">
            <div
              className="px-4 py-3 rounded-2xl rounded-bl-md text-sm shadow-sm flex items-center gap-2"
              style={{
                backgroundColor: theme.textColor + '10',
                color: theme.textColor + '80',
                border: `1px solid ${theme.textColor}20`
              }}
            >
              <div className="flex space-x-1">
                <div className="w-2 h-2 rounded-full bg-current animate-bounce" style={{ animationDelay: '0ms' }}></div>
                <div className="w-2 h-2 rounded-full bg-current animate-bounce" style={{ animationDelay: '150ms' }}></div>
                <div className="w-2 h-2 rounded-full bg-current animate-bounce" style={{ animationDelay: '300ms' }}></div>
              </div>
              <span>‡∏ö‡∏±‡∏á‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î...</span>
            </div>
          </div>
        )}
      </div>

      {/* Input Form */}
      <form
        onSubmit={async (e) => {
          e.preventDefault();
          if (!chatInput.trim() || isLoading) return;

          const currentInput = chatInput;
          setChatInput("");
          setIsLoading(true);

          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤
          setChatLog((prev) => [...prev, `‡πÄ‡∏£‡∏≤: ${currentInput}`]);

          try {
            const res = await fetch("/api/chat", {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({
                systemPrompt: `‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ö‡∏±‡∏á‡∏ü‡∏±‡∏ô‡∏î‡∏µ‡πâ ‡∏û‡∏µ‡πà‡∏ï‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏î‡πá‡∏Å‡∏ó‡∏≥‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à ‡πÑ‡∏°‡πà‡πÄ‡∏â‡∏•‡∏¢‡∏ï‡∏£‡∏á‡πÜ ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏Ñ‡πà‡∏≠‡∏¢‡πÜ ‡∏û‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏¥‡∏î‡πÄ‡∏≠‡∏á ‡∏î‡πâ‡∏ß‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ:

1. **‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÇ‡∏à‡∏ó‡∏¢‡πå**: ‡πÅ‡∏ï‡∏Å‡πÇ‡∏à‡∏ó‡∏¢‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à ‡∏´‡∏≤‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
2. **‡∏î‡∏π‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å**: ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö ‡∏ï‡∏±‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß
3. **‡πÇ‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö**: ‡πÄ‡∏ä‡πà‡∏ô "‡∏ô‡∏∂‡∏Å‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏≠‡∏Å‡∏ö‡πâ‡∏≤‡∏á?" "‡∏Ç‡πâ‡∏≠‡πÑ‡∏´‡∏ô‡∏ï‡∏±‡∏î‡∏ó‡∏¥‡πâ‡∏á‡πÑ‡∏î‡πâ?"
4. **‡πÉ‡∏´‡πâ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à‡∏™‡∏±‡πâ‡∏ô‡πÜ**: ‡πÄ‡∏ä‡πà‡∏ô "‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å!" "‡∏Ñ‡∏¥‡∏î‡∏î‡∏µ‡πÅ‡∏•‡πâ‡∏ß!" "‡πÉ‡∏Å‡∏•‡πâ‡πÅ‡∏•‡πâ‡∏ß!"

‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏û‡∏µ‡πà‡πÜ ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏ô‡πÄ‡∏≠‡∏á ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡πÄ‡∏£‡∏≤" ‡πÅ‡∏ó‡∏ô "‡∏Ñ‡∏∏‡∏ì" ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏∏‡∏†‡∏≤‡∏û‡πÄ‡∏Å‡∏¥‡∏ô  
‡πÑ‡∏°‡πà‡∏û‡∏π‡∏î‡πÅ‡∏ö‡∏ö‡πÇ‡∏•‡∏Å‡∏™‡∏ß‡∏¢ ‡πÑ‡∏°‡πà‡∏¢‡∏±‡∏î‡πÄ‡∏¢‡∏µ‡∏¢‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏±‡∏á‡∏î‡∏µ  
‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏±‡πâ‡∏ô ‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡∏°‡∏µ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏∞‡πÉ‡∏´‡πâ‡πÄ‡∏î‡πá‡∏Å‡∏Ñ‡∏¥‡∏î‡πÄ‡∏≠‡∏á`,
                question,
                choices,
                userMessage: currentInput,
              }),
            });

            if (!res.ok) {
              throw new Error(`HTTP ${res.status}`);
            }

            const data = await res.json();
            setChatLog((prev) => [
              ...prev,
              `‡∏ö‡∏±‡∏á‡∏ü‡∏±‡∏ô‡∏î‡∏µ‡πâ: ${data.reply || "‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏ô‡∏∞ ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö"}`,
            ]);
          } catch (error) {
            console.error('Chat error:', error);
            setChatLog((prev) => [
              ...prev,
              `‡∏ö‡∏±‡∏á‡∏ü‡∏±‡∏ô‡∏î‡∏µ‡πâ: ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏ö‡∏≠‡∏ó‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏ó‡∏µ‡∏ô‡∏∞ üôè`,
            ]);
          } finally {
            setIsLoading(false);
          }
        }}
        className="flex gap-3"
      >
        <input
          className="flex-1 rounded-xl px-4 py-3 text-sm transition-all duration-200 focus:scale-[1.02] focus:outline-none focus:ring-2 focus:ring-blue-500"
          placeholder="‡πÄ‡∏ä‡πà‡∏ô: ‡∏Ç‡πâ‡∏≠‡∏ô‡∏µ‡πâ‡∏ñ‡∏≤‡∏°‡∏≠‡∏∞‡πÑ‡∏£? ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏´‡∏ô‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πà?"
          value={chatInput}
          onChange={(e) => setChatInput(e.target.value)}
          style={{
            backgroundColor: theme.textColor + '08',
            borderColor: theme.textColor + '20',
            color: theme.textColor,
            border: `1px solid ${theme.textColor}20`
          }}
        />
        <button
          type="submit"
          disabled={!chatInput.trim() || isLoading}
          className="px-6 py-3 text-sm rounded-xl font-medium transition-all duration-200 hover:scale-105 disabled:opacity-50 disabled:scale-100 shadow-lg"
          style={{
            backgroundColor: '#3b82f6',
            color: '#ffffff'
          }}
        >
          {isLoading ? (
            <div className="flex items-center gap-1">
              <div className="w-3 h-3 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
              <span>‚è≥</span>
            </div>
          ) : (
            <span>‡∏™‡πà‡∏á üì§</span>
          )}
        </button>
      </form>
    </div>
  );
}
