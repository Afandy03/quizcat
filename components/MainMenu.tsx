// components/MainMenu.tsx
'use client'

import Link from "next/link"
import { usePathname } from "next/navigation"
import { useEffect, useState, useMemo, useCallback } from "react"
import { useUserTheme, getBackgroundStyle } from "@/lib/useTheme"

const menuItems = [
  // üîπ ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
  { label: "‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î", path: "/dashboard", icon: "üè†" },
  { label: "‡∏ó‡∏≥‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö", path: "/quiz/v2/select", icon: "üöÄ" },

  // üîπ ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•
  { label: "‡πÅ‡∏•‡∏Å‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•", path: "/rewards", icon: "üéÅ" },

  // üîπ ‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö
  { label: "‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö", path: "/quiz/manage", icon: "üóÇÔ∏è" },

  // üîπ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  { label: "‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå", path: "/profile", icon: "üôã" },
  { label: "‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", path: "/settings", icon: "‚öôÔ∏è" },

  // üîπ ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
  { label: "‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", path: "/admin/users", icon: "üõ†Ô∏è" },
  { label: "‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö", path: "/quiz/v2/analysis", icon: "üìà" },
  
  // üîπ ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
  { label: "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö", path: "/login", icon: "üö™" },
]

export default function MainMenu() {
  const currentPath = usePathname()
  const [mounted, setMounted] = useState(false)
  const { theme, isLoading } = useUserTheme()

  useEffect(() => {
    setMounted(true)
  }, [])

  // ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á MainMenu
  const hiddenPages = ['/login', '/']
  
  // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ã‡πà‡∏≠‡∏ô ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á MainMenu
  if (hiddenPages.includes(currentPath)) {
    return null
  }

  // Memoize ‡∏™‡∏µ‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
  const menuColors = useMemo(() => {
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô gradient ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™‡πÄ‡∏õ‡πá‡∏ô background
    const isGradient = theme.bgColor.includes('gradient')
    
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏µ‡∏° gradient ‡∏ï‡πà‡∏≤‡∏á‡πÜ
    if (isGradient) {
      // ‡∏ò‡∏µ‡∏°‡∏ã‡∏≤‡∏Å‡∏∏‡∏£‡∏∞
      const isSakura = theme.bgColor.includes('fce7f3') || theme.textColor === '#8b4513'
      // ‡∏ò‡∏µ‡∏°‡∏ß‡∏¥‡∏ô‡πÄ‡∏ó‡∏à
      const isVintage = theme.bgColor.includes('f9f7ff') || theme.textColor === '#5d4e37'
      
      if (isSakura) {
        return {
          menuBgColor: 'rgba(252, 231, 243, 0.9)', // ‡∏™‡∏µ‡∏ä‡∏°‡∏û‡∏π‡∏≠‡πà‡∏≠‡∏ô‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™
          menuTextColor: '#8b4513', // ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÄ‡∏Ç‡πâ‡∏°
          borderColor: 'rgba(139, 69, 19, 0.3)',
          hoverBgColor: 'rgba(252, 231, 243, 0.7)',
          activeBgColor: 'rgba(139, 69, 19, 0.8)',
          activeTextColor: '#ffffff'
        }
      } else if (isVintage) {
        return {
          menuBgColor: 'rgba(249, 247, 255, 0.9)', // ‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á‡∏≠‡πà‡∏≠‡∏ô‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™
          menuTextColor: '#5d4e37', // ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏≠‡πà‡∏≠‡∏ô
          borderColor: 'rgba(93, 78, 55, 0.3)',
          hoverBgColor: 'rgba(249, 247, 255, 0.7)',
          activeBgColor: 'rgba(93, 78, 55, 0.8)',
          activeTextColor: '#ffffff'
        }
      } else {
        // gradient ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        return {
          menuBgColor: 'rgba(255, 255, 255, 0.9)',
          menuTextColor: '#333333',
          borderColor: 'rgba(255, 255, 255, 0.3)',
          hoverBgColor: 'rgba(255, 255, 255, 0.2)',
          activeBgColor: 'rgba(255, 255, 255, 0.8)',
          activeTextColor: '#333333'
        }
      }
    } else {
      // ‡∏™‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
      return {
        menuBgColor: theme.bgColor,
        menuTextColor: theme.textColor,
        borderColor: theme.textColor + "30",
        hoverBgColor: theme.textColor + "15",
        activeBgColor: theme.textColor,
        activeTextColor: theme.bgColor
      }
    }
  }, [theme.bgColor, theme.textColor])

  // ‡πÉ‡∏ä‡πâ theme ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏µ - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡∏≠‡∏ô‡∏ó‡∏£‡∏≤‡∏™‡∏ï‡πå‡∏î‡∏µ
  const getContrastColor = useCallback((hexColor: string) => {
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏µ hex ‡πÄ‡∏õ‡πá‡∏ô RGB
    const r = parseInt(hexColor.slice(1, 3), 16)
    const g = parseInt(hexColor.slice(3, 5), 16)
    const b = parseInt(hexColor.slice(5, 7), 16)
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡πà‡∏≤‡∏á
    const brightness = (r * 299 + g * 587 + b * 114) / 1000
    
    // ‡∏ñ‡πâ‡∏≤‡∏™‡∏µ‡πÄ‡∏Ç‡πâ‡∏° ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß ‡∏ñ‡πâ‡∏≤‡∏™‡∏µ‡∏™‡∏ß‡πà‡∏≤‡∏á ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏µ‡∏î‡∏≥
    return brightness < 128 ? '#ffffff' : '#000000'
  }, [])

  // ‡πÅ‡∏™‡∏î‡∏á loading ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ render ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà auth state ‡∏à‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°
  // Default styles for hydration
  const defaultNavStyle = {
    backgroundColor: "#ffffff",
    borderColor: "#00000030",
    color: "#000000"
  }

  if (!mounted || isLoading) {
    return (
      <nav 
        className="fixed top-4 left-4 rounded-xl shadow-lg border p-4 space-y-1 w-52 z-50"
        style={defaultNavStyle}
        suppressHydrationWarning
      >
        <div className="text-center py-4">
          <div className="animate-pulse">‚è≥ ‡πÇ‡∏´‡∏•‡∏î...</div>
        </div>
      </nav>
    )
  }

  return (
    <nav 
      className="fixed top-4 left-4 rounded-xl shadow-lg border p-4 space-y-1 w-52 z-50"
      style={{ 
        backgroundColor: menuColors.menuBgColor,
        borderColor: menuColors.borderColor,
        color: menuColors.menuTextColor,
        backdropFilter: theme.bgColor.includes('gradient') ? 'blur(10px)' : 'none'
      }}
      suppressHydrationWarning
    >
      {menuItems.map((item) => (
        <Link
          key={item.path}
          href={item.path}
          className={`
            block px-4 py-2.5 rounded-lg transition-all duration-200 
            ${currentPath === item.path 
              ? "shadow-md transform scale-105" 
              : "hover:transform hover:scale-102"
            }
          `}
          style={{
            backgroundColor: currentPath === item.path 
              ? menuColors.activeBgColor 
              : 'transparent',
            color: currentPath === item.path 
              ? menuColors.activeTextColor 
              : menuColors.menuTextColor,
          }}
          suppressHydrationWarning
          onMouseEnter={(e) => {
            if (currentPath !== item.path) {
              e.currentTarget.style.backgroundColor = menuColors.hoverBgColor
            }
          }}
          onMouseLeave={(e) => {
            if (currentPath !== item.path) {
              e.currentTarget.style.backgroundColor = 'transparent'
            }
          }}
        >
          <span className="text-lg mr-2">{item.icon}</span>
          <span className="text-sm font-medium">{item.label}</span>
        </Link>
      ))}
    </nav>
  )
}
