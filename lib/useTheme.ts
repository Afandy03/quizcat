// lib/useTheme.ts
"use client"

import { useState, useEffect, useRef, useCallback } from "react"
import { auth, db } from "./firebase" // import ‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏∂‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
import { onAuthStateChanged } from "firebase/auth"
import { doc, getDoc } from "firebase/firestore"

// ‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡∏Ç‡∏≠‡∏á theme ‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ
interface Theme {
  bgColor: string
  textColor: string
}

// Global cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö theme ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏ã‡πâ‡∏≥
let globalThemeCache: Theme | null = null
let globalThemeInitialized = false

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î theme ‡∏à‡∏≤‡∏Å localStorage (sync)
function loadThemeFromStorage(): Theme {
  if (typeof window === 'undefined') {
    return { bgColor: "#ffffff", textColor: "#000000" }
  }
  
  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ global cache ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏¢
  if (globalThemeCache && globalThemeInitialized) {
    console.log('üöÄ Using global cache:', globalThemeCache)
    return globalThemeCache
  }
  
  const isGuestMode = localStorage.getItem('quizcat-guest-mode') === 'true'
  console.log('üîç Guest mode:', isGuestMode)
  
  if (isGuestMode) {
    const savedTheme = localStorage.getItem('quizcat-guest-theme')
    console.log('üë• Guest theme from localStorage:', savedTheme)
    if (savedTheme) {
      try {
        const parsed = JSON.parse(savedTheme)
        globalThemeCache = parsed
        console.log('‚úÖ Guest theme loaded:', parsed)
        return parsed
      } catch (error) {
        console.error('‚ùå Error parsing guest theme:', error)
      }
    }
  } else {
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user ‡∏ó‡∏µ‡πà login ‡πÅ‡∏•‡πâ‡∏ß ‡∏•‡∏≠‡∏á‡∏´‡∏≤ cache theme
    const cachedTheme = localStorage.getItem('quizcat-user-theme-cache')
    console.log('üë§ User theme cache from localStorage:', cachedTheme)
    if (cachedTheme) {
      try {
        const parsed = JSON.parse(cachedTheme)
        globalThemeCache = parsed
        console.log('‚úÖ User theme cache loaded:', parsed)
        return parsed
      } catch (error) {
        console.error('‚ùå Error parsing cached theme:', error)
      }
    }
  }
  
  const defaultTheme = { bgColor: "#ffffff", textColor: "#000000" }
  globalThemeCache = defaultTheme
  console.log('‚ö™ Using default theme:', defaultTheme)
  return defaultTheme
}

export function useUserTheme() {
  // ‡πÇ‡∏´‡∏•‡∏î theme ‡∏à‡∏≤‡∏Å localStorage ‡∏´‡∏£‡∏∑‡∏≠ global cache ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö
  const [theme, setTheme] = useState<Theme>(() => loadThemeFromStorage())
  // ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÑ‡∏°‡πà loading ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏°‡∏µ cache ‡πÅ‡∏•‡πâ‡∏ß, ‡∏à‡∏∞ loading ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠ Firebase Auth
  const [isLoading, setIsLoading] = useState(false)
  
  // ‡πÉ‡∏ä‡πâ ref ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ re-run useEffect ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
  const authListenerRef = useRef<(() => void) | null>(null)
  const themeLoadedRef = useRef(globalThemeInitialized)

  // Memoized function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï theme
  const updateTheme = useCallback((newTheme: Theme) => {
    globalThemeCache = newTheme
    setTheme(newTheme)
  }, [])

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï CSS variables ‡πÄ‡∏°‡∏∑‡πà‡∏≠ theme ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô (‡πÉ‡∏ä‡πâ useCallback ‡πÄ‡∏û‡∏∑‡πà‡∏≠ optimize)
  const updateCSSVariables = useCallback((themeToUpdate: Theme) => {
    // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö gradient
    if (themeToUpdate.bgColor.includes('gradient')) {
      document.documentElement.style.setProperty('--background', 'transparent')
      document.body.style.background = themeToUpdate.bgColor
    } else {
      document.documentElement.style.setProperty('--background', themeToUpdate.bgColor)
      document.body.style.background = ''
    }
    document.documentElement.style.setProperty('--foreground', themeToUpdate.textColor)
  }, [])

  useEffect(() => {
    updateCSSVariables(theme)
  }, [theme, updateCSSVariables])

  useEffect(() => {
    // ‡∏ñ‡πâ‡∏≤ theme ‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å global cache ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
    if (themeLoadedRef.current && authListenerRef.current) {
      return authListenerRef.current
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö guest mode ‡∏Å‡πà‡∏≠‡∏ô
    const isGuestMode = localStorage.getItem('quizcat-guest-mode') === 'true'
    
    if (isGuestMode) {
      console.log('üë§ Guest mode detected')
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö guest ‡πÉ‡∏ä‡πâ theme ‡∏à‡∏≤‡∏Å localStorage
      const savedTheme = localStorage.getItem('quizcat-guest-theme')
      if (savedTheme) {
        try {
          const parsedTheme = JSON.parse(savedTheme)
          updateTheme(parsedTheme)
          console.log('‚úÖ Guest theme loaded:', parsedTheme)
        } catch (error) {
          console.error('Error parsing guest theme:', error)
          updateTheme({ bgColor: "#ffffff", textColor: "#000000" })
        }
      } else {
        updateTheme({ bgColor: "#ffffff", textColor: "#000000" })
        console.log('üîß Guest using default theme')
      }
      // ‚úÖ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á setIsLoading(false) ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô false ‡πÅ‡∏•‡πâ‡∏ß
      globalThemeInitialized = true
      themeLoadedRef.current = true
      return
    }

    // onAuthStateChanged ‡∏à‡∏∞‡∏Ñ‡∏≠‡∏¢‡∏ü‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ login ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏°‡∏±‡πâ‡∏¢ (login, logout)
    const unsubscribe = onAuthStateChanged(auth, async (user) => {
      console.log('üîÑ Auth state changed, user:', user?.uid || 'null')
      try {
        if (user) {
          // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ cache ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          const existingCache = localStorage.getItem('quizcat-user-theme-cache')
          if (existingCache) {
            console.log('üíæ Found existing cache, using it first')
            try {
              const cachedTheme = JSON.parse(existingCache)
              updateTheme(cachedTheme)
              // ‚úÖ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á setIsLoading(false) ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ loading ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
              globalThemeInitialized = true
              themeLoadedRef.current = true
              console.log('‚úÖ Cache theme applied immediately')
            } catch (error) {
              console.error('‚ùå Error parsing existing cache:', error)
            }
          }

          // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ user login ‡∏≠‡∏¢‡∏π‡πà ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å Firestore ‡πÄ‡∏û‡∏∑‡πà‡∏≠ sync (‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á loading)
          console.log('üî• Fetching theme from Firestore for sync...')
          const docRef = doc(db, "users", user.uid)
          const docSnap = await getDoc(docRef)

          if (docSnap.exists()) {
            const userData = docSnap.data()
            // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏°‡∏µ field ‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠ theme ‡∏≠‡∏¢‡∏π‡πà‡∏°‡∏±‡πâ‡∏¢
            if (userData.theme) {
              updateTheme(userData.theme)
              // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï cache ‡πÄ‡∏™‡∏°‡∏≠
              localStorage.setItem('quizcat-user-theme-cache', JSON.stringify(userData.theme))
              console.log('‚úÖ Theme synced from Firestore:', userData.theme)
            } else {
              console.log('‚ö†Ô∏è No theme data in Firestore')
            }
          } else {
            console.log('‚ö†Ô∏è User document not found in Firestore')
          }
        } else {
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ user login, ‡∏Å‡πá‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÑ‡∏õ
          updateTheme({ bgColor: "#ffffff", textColor: "#000000" })
          // ‡∏•‡∏ö cache ‡πÄ‡∏°‡∏∑‡πà‡∏≠ logout
          localStorage.removeItem('quizcat-user-theme-cache')
          globalThemeCache = null
          console.log('üö™ User logged out, cleared cache')
        }
      } catch (error) {
        console.error('‚ùå Error loading theme:', error)
      } finally {
        // ‚úÖ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á setIsLoading(false) ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ loading ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
        globalThemeInitialized = true
        themeLoadedRef.current = true
      }
    })

    authListenerRef.current = unsubscribe

    // Cleanup function: ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á onAuthStateChanged ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component ‡∏ñ‡∏π‡∏Å unmount
    return () => {
      if (authListenerRef.current) {
        authListenerRef.current()
        authListenerRef.current = null
      }
    }
  }, [updateTheme]) // ‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö updateTheme ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

  return { theme, isLoading } // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ theme ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å theme ‡∏Ç‡∏≠‡∏á guest
export function saveGuestTheme(theme: Theme) {
  localStorage.setItem('quizcat-guest-theme', JSON.stringify(theme))
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô helper ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ background ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö gradient
export function getBackgroundStyle(bgColor: string) {
  const isGradient = bgColor.includes('gradient')
  return isGradient 
    ? { background: bgColor }
    : { backgroundColor: bgColor }
}